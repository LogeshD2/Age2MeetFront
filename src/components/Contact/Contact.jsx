import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { contactService, userService } from '../../config/api';
import './Contact.css';

export default function ContactSection() {
  const [activeTab, setActiveTab] = useState('contact');
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  
  // √âtats pour les vraies donn√©es
  const [contacts, setContacts] = useState([]);
  const [pendingRequests, setPendingRequests] = useState([]);
  const [sentRequests, setSentRequests] = useState([]); // NOUVEAU: Demandes envoy√©es
  const [allUsers, setAllUsers] = useState([]);
  const [persistentUsers, setPersistentUsers] = useState([]); // Liste persistante des utilisateurs
  const [highlightedUserId, setHighlightedUserId] = useState(null); // NOUVEAU: Pour mettre en √©vidence une personne
  
  const navigate = useNavigate();

  // Helper function pour rendre les avatars correctement
  const renderAvatar = (profilePicture, name, className = "contact-avatar-large") => {
    console.log('renderAvatar called with:', { profilePicture, name }); // Debug log
    
    // V√©rifier si nous avons une URL d'image valide
    const isImageUrl = profilePicture && 
      (profilePicture.includes('http') || 
       profilePicture.includes('/media/') || 
       profilePicture.includes('cloudinary') ||
       profilePicture.includes('amazonaws') ||
       profilePicture.includes('.jpg') ||
       profilePicture.includes('.jpeg') ||
       profilePicture.includes('.png') ||
       profilePicture.includes('.gif') ||
       profilePicture.includes('.webp'));
    
    const imageUrl = isImageUrl ? 
      (profilePicture.startsWith('/media/') ? `http://localhost:8000${profilePicture}` : profilePicture) : 
      null;
    
    // G√©n√©rer un avatar automatique si pas d'image
    const autoAvatar = !isImageUrl ? 
      `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=70D9FF&color=fff&size=128&rounded=true&bold=true` :
      null;
    
    console.log('Image URL logic:', { isImageUrl, imageUrl, autoAvatar }); // Debug log
    
    if (isImageUrl || autoAvatar) {
      return (
        <div className={className}>
          <img 
            src={imageUrl || autoAvatar} 
            alt={name}
            className="avatar-image"
            onError={(e) => {
              console.log('Image failed to load:', profilePicture, 'URL:', imageUrl || autoAvatar);
              e.target.style.display = 'none';
              e.target.nextSibling.style.display = 'flex';
            }}
            onLoad={() => {
              console.log('Image loaded successfully:', imageUrl || autoAvatar);
            }}
          />
          <span 
            className="avatar-letter" 
            style={{display: 'none'}}
          >
            {name.charAt(0).toUpperCase()}
          </span>
        </div>
      );
    } else {
      console.log('Using letter avatar for:', name, 'profilePicture was:', profilePicture);
      return (
        <div className={className}>
          <span className="avatar-letter">
            {name.charAt(0).toUpperCase()}
          </span>
        </div>
      );
    }
  };

  // Charger les donn√©es au montage du composant
  useEffect(() => {
    // Charger les utilisateurs persistants depuis localStorage
    const savedUsers = localStorage.getItem('persistentUsers');
    if (savedUsers) {
      try {
        setPersistentUsers(JSON.parse(savedUsers));
      } catch (error) {
        console.error('Erreur lors du chargement des utilisateurs persistants:', error);
      }
    }
    
    // Charger les demandes envoy√©es depuis localStorage
    const savedSentRequests = localStorage.getItem('sentRequests');
    if (savedSentRequests) {
      try {
        const sentRequestsData = JSON.parse(savedSentRequests);
        setSentRequests(sentRequestsData);
        console.log('üì§ Demandes envoy√©es charg√©es:', sentRequestsData.length);
      } catch (error) {
        console.error('Erreur lors du chargement des demandes envoy√©es:', error);
      }
    }
    
    loadContactData();
  }, []);

  const loadContactData = async () => {
    setLoading(true);
    setError('');
    
    try {
      // R√©cup√©rer mes contacts depuis l'API
      const contactsData = await contactService.getMyContacts();
      console.log('üîç DONN√âES COMPL√àTES de l\'API:', contactsData);
      console.log('üîç Cl√©s disponibles:', Object.keys(contactsData));
      
      // Debug: v√©rifier toutes les propri√©t√©s des donn√©es
      if (contactsData.pending_requests) {
        console.log('üì• Demandes RE√áUES:', contactsData.pending_requests.length);
        contactsData.pending_requests.forEach(request => {
          console.log('  - Demande de:', request.user.username, 'ID:', request.user.id);
        });
      }
      
      if (contactsData.sent_requests) {
        console.log('üì§ Demandes ENVOY√âES depuis API:', contactsData.sent_requests.length);
        contactsData.sent_requests.forEach(request => {
          console.log('  - Demande vers:', request.contact.username, 'ID:', request.contact.id);
        });
      } else {
        console.log('üì§ Aucune propri√©t√© sent_requests dans l\'API');
      }
      
      if (contactsData.accepted_contacts) {
        console.log('‚úÖ Contacts ACCEPT√âS:', contactsData.accepted_contacts.length);
        contactsData.accepted_contacts.forEach(contact => {
          console.log('  - Ami:', contact.username, 'ID:', contact.id);
        });
      }
      
      // S√©parer les contacts accept√©s et les demandes en attente
      const acceptedContacts = contactsData.accepted_contacts || [];
      const pendingContactRequests = contactsData.pending_requests || [];
      
      // Formater les contacts accept√©s
      const formattedContacts = acceptedContacts.map(contact => ({
        id: contact.id,
        name: contact.username || `${contact.first_name} ${contact.last_name}`,
        fullName: `${contact.first_name} ${contact.last_name}`,
        email: contact.email,
        bio: contact.bio || 'Aucune description disponible',
        location: contact.location || 'Non sp√©cifi√©',
        interests: contact.interests ? contact.interests.split(',').map(i => i.trim()) : [],
        status: contact.status || 'online',
        profilePicture: contact.profile_picture || contact.profilePicture || contact.avatar || contact.image || contact.photo,
        contactRelationId: contact.contact_relation_id
      }));
      
      // Descriptions vari√©es pour les demandes d'ami
      const requestDescriptions = [
        "Souhaite partager des moments conviviaux et d√©couvrir de nouveaux amis",
        "√Ä la recherche de nouvelles amiti√©s pour enrichir son quotidien",
        "Passionn√© par les rencontres authentiques et les √©changes enrichissants",
        "Aime cr√©er des liens durables et partager des exp√©riences communes",
        "Cherche √† √©largir son cercle d'amis pour de belles aventures",
        "Appr√©cie la convivialit√© et souhaite tisser de nouveaux liens",
        "Ouvert aux rencontres et aux nouvelles d√©couvertes ensemble",
        "D√©sire cr√©er des amiti√©s sinc√®res et durables"
      ];

      // Formater les demandes en attente
      const formattedRequests = pendingContactRequests.map(request => {
        const descriptionIndex = request.user.id % requestDescriptions.length;
        const defaultBio = requestDescriptions[descriptionIndex];
        
        return {
          id: request.user.id,
          name: request.user.username || `${request.user.first_name} ${request.user.last_name}`,
          fullName: `${request.user.first_name} ${request.user.last_name}`,
          email: request.user.email,
          bio: request.user.bio || request.user.description || defaultBio,
          location: request.user.location || 'Non sp√©cifi√©',
          interests: request.user.interests ? request.user.interests.split(',').map(i => i.trim()) : [],
          status: 'pending',
          profilePicture: request.user.profile_picture || request.user.profilePicture || request.user.avatar || request.user.image || request.user.photo || `https://ui-avatars.com/api/?name=${encodeURIComponent(request.user.username || 'User')}&background=70D9FF&color=fff&size=128&rounded=true&bold=true`,
          contactRelationId: request.id
        };
      });
      
      setContacts(formattedContacts);
      setPendingRequests(formattedRequests);
      
      // NOUVEAU: G√©rer les demandes envoy√©es depuis l'API
      const sentContactRequests = contactsData.sent_requests || [];
      console.log('üì§ Traitement des demandes envoy√©es depuis API:', sentContactRequests.length);
      
      const formattedSentRequests = sentContactRequests.map(request => {
        const descriptionIndex = request.contact.id % requestDescriptions.length;
        const defaultBio = requestDescriptions[descriptionIndex];
        
        return {
          id: request.contact.id,
          name: request.contact.username || `${request.contact.first_name} ${request.contact.last_name}`,
          fullName: `${request.contact.first_name} ${request.contact.last_name}`,
          email: request.contact.email,
          bio: request.contact.bio || request.contact.description || defaultBio,
          location: request.contact.location || 'Non sp√©cifi√©',
          interests: request.contact.interests ? request.contact.interests.split(',').map(i => i.trim()) : [],
          profilePicture: request.contact.profile_picture || request.contact.profilePicture || request.contact.avatar || request.contact.image || request.contact.photo || `https://ui-avatars.com/api/?name=${encodeURIComponent(request.contact.username || 'User')}&background=70D9FF&color=fff&size=128&rounded=true&bold=true`,
          status: 'sent',
          sentAt: request.created_at || new Date().toISOString()
        };
      });
      
      // Fusionner avec les demandes envoy√©es du localStorage
      const currentSentFromStorage = JSON.parse(localStorage.getItem('sentRequests') || '[]');
      console.log('üì§ Demandes envoy√©es depuis localStorage:', currentSentFromStorage.length);
      
      // OBTENIR L'ID DE L'UTILISATEUR ACTUEL POUR √âVITER L'AUTO-AJOUT
      const currentUserId = parseInt(localStorage.getItem('userId'));
      
      // Cr√©er une map pour √©viter les doublons
      const sentRequestsMap = new Map();
      
      // Ajouter les demandes de l'API d'abord (priorit√©) - avec protection anti-auto-ajout
      formattedSentRequests.forEach(request => {
        if (request.id !== currentUserId) {
          sentRequestsMap.set(request.id, request);
          console.log('üì§ Ajout demande API:', request.name);
        } else {
          console.log('‚ùå Auto-ajout d√©tect√© depuis API - ignor√©:', request.name);
        }
      });
      
      // Ajouter les demandes du localStorage qui ne sont pas dans l'API - avec protection anti-auto-ajout
      currentSentFromStorage.forEach(request => {
        if (request.id !== currentUserId && !sentRequestsMap.has(request.id)) {
          sentRequestsMap.set(request.id, request);
          console.log('üì§ Ajout demande localStorage:', request.name);
        } else if (request.id === currentUserId) {
          console.log('‚ùå Auto-ajout d√©tect√© depuis localStorage - ignor√©:', request.name);
        }
      });
      
      const finalSentRequests = Array.from(sentRequestsMap.values());
      console.log('üì§ Total demandes envoy√©es finales:', finalSentRequests.length);
      
      setSentRequests(finalSentRequests);
      
      // Sauvegarder la liste fusionn√©e dans localStorage (d√©j√† nettoy√©e des auto-ajouts)
      localStorage.setItem('sentRequests', JSON.stringify(finalSentRequests));
      
      // Ajouter les utilisateurs des demandes d'ami √† la liste persistante
      if (formattedRequests.length > 0) {
        const currentPersistent = JSON.parse(localStorage.getItem('persistentUsers') || '[]');
        const persistentMap = new Map();
        
        // Ajouter les utilisateurs persistants existants
        currentPersistent.forEach(user => {
          persistentMap.set(user.id, user);
        });
        
        // Ajouter les utilisateurs des demandes d'ami
        formattedRequests.forEach(request => {
          if (!persistentMap.has(request.id)) {
            persistentMap.set(request.id, {
              id: request.id,
              name: request.name,
              fullName: request.fullName,
              email: request.email,
              bio: request.bio,
              location: request.location,
              interests: request.interests,
              profile_picture: request.profilePicture
            });
          }
        });
        
        const updatedPersistent = Array.from(persistentMap.values());
        localStorage.setItem('persistentUsers', JSON.stringify(updatedPersistent));
        setPersistentUsers(updatedPersistent);
      }
      
      // R√©cup√©rer les utilisateurs sugg√©r√©s
      const homeData = await userService.getAllUsers();
      console.log('Donn√©es accueil:', homeData);
      
      // Debug: v√©rifier les photos de profil des utilisateurs sugg√©r√©s
      if (homeData.suggested_contacts) {
        homeData.suggested_contacts.forEach(user => {
          console.log('Utilisateur sugg√©r√©:', user.username, 'photo:', user.profile_picture);
          console.log('Tous les champs utilisateur sugg√©r√©:', Object.keys(user));
        });
      }
      
      if (homeData.suggested_contacts) {
        // Descriptions vari√©es pour les utilisateurs sugg√©r√©s
        const defaultDescriptions = [
          "Passionn√© par les rencontres et les nouvelles exp√©riences",
          "J'aime partager des moments conviviaux autour d'un bon repas",
          "Amateur de balades en nature et de d√©couvertes culturelles",
          "Toujours pr√™t(e) pour une nouvelle aventure ou un bon livre",
          "J'appr√©cie les discussions enrichissantes et les activit√©s cr√©atives",
          "Fervent d√©fenseur de la joie de vivre et des relations authentiques",
          "Curieux de nature, j'aime apprendre et d√©couvrir de nouveaux horizons",
          "Entre tradition et modernit√©, je cultive l'art de bien vivre",
          "Passionn√© par l'art, la musique et les rencontres sinc√®res",
          "J'aime transmettre mon exp√©rience tout en apprenant des autres"
        ];

        const suggestedUsers = homeData.suggested_contacts.map(user => {
          // Utiliser l'ID pour avoir une description consistante pour chaque utilisateur
          const descriptionIndex = user.id % defaultDescriptions.length;
          const defaultBio = defaultDescriptions[descriptionIndex];
          
          return {
            id: user.id,
            name: user.username || `${user.first_name} ${user.last_name}`,
            fullName: `${user.first_name} ${user.last_name}`,
            email: user.username,
            bio: user.bio || user.description || user.bio_text || user.about || defaultBio,
            location: user.location || 'Non sp√©cifi√©',
            interests: user.interests ? user.interests.split(',').map(i => i.trim()) : [],
            profile_picture: user.profile_picture || user.profilePicture || user.avatar || user.image || user.photo
          };
        });
        
        // Fusionner avec les utilisateurs persistants pour √©viter de perdre ceux qui ont √©t√© refus√©s
        const currentPersistent = JSON.parse(localStorage.getItem('persistentUsers') || '[]');
        console.log('üîç Utilisateurs persistants charg√©s:', currentPersistent.length, currentPersistent.map(u => u.name));
        console.log('üîç Nouvelles suggestions API:', suggestedUsers.length, suggestedUsers.map(u => u.name));
        
        const allUsersMap = new Map();
        
        // Ajouter les utilisateurs persistants d'abord
        currentPersistent.forEach(user => {
          allUsersMap.set(user.id, user);
          console.log('‚ûï Ajout utilisateur persistant:', user.name);
        });
        
        // Ajouter/mettre √† jour avec les nouveaux utilisateurs sugg√©r√©s
        suggestedUsers.forEach(user => {
          allUsersMap.set(user.id, user);
          console.log('‚ûï Ajout/mise √† jour suggestion:', user.name);
        });
        
        // Convertir en tableau et sauvegarder
        const mergedUsers = Array.from(allUsersMap.values());
        console.log('üéØ Total utilisateurs fusionn√©s:', mergedUsers.length, mergedUsers.map(u => u.name));
        
        localStorage.setItem('persistentUsers', JSON.stringify(mergedUsers));
        setPersistentUsers(mergedUsers);
        
        setAllUsers(mergedUsers);
      } else {
        // Si pas de suggestions de l'API, utiliser seulement les utilisateurs persistants
        const currentPersistent = JSON.parse(localStorage.getItem('persistentUsers') || '[]');
        setPersistentUsers(currentPersistent);
        setAllUsers(currentPersistent);
        console.log('Aucune suggestion API, utilisation des utilisateurs persistants:', currentPersistent.length);
      }
      
    } catch (error) {
      console.error('Erreur lors du chargement des contacts:', error);
      setError('Impossible de charger les contacts. Veuillez vous reconnecter.');
    } finally {
      setLoading(false);
    }
  };

  // Filtrer les utilisateurs en fonction de la recherche ET exclure ceux qui ont d√©j√† une relation
  const filteredUsers = allUsers.filter(user => {
    // Exclure les utilisateurs d√©j√† amis
    const isAlreadyFriend = contacts.some(contact => contact.id === user.id);
    
    // Exclure les utilisateurs qui ont une demande en attente (re√ßue)
    const hasPendingRequest = pendingRequests.some(request => request.id === user.id);
    
    // Exclure les utilisateurs √† qui on a d√©j√† envoy√© une demande
    const hasSentRequest = sentRequests.some(request => request.id === user.id);
    
    // Filtrer par recherche
    const matchesSearch = !searchQuery || (
      user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.bio.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.location.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.interests.some(interest => interest.toLowerCase().includes(searchQuery.toLowerCase()))
    );
    
    console.log(`üîç Filtrage utilisateur ${user.name} (ID: ${user.id}):`, {
      isAlreadyFriend,
      hasPendingRequest,
      hasSentRequest,
      matchesSearch,
      shouldShow: !isAlreadyFriend && !hasPendingRequest && !hasSentRequest && matchesSearch
    });
    
    return !isAlreadyFriend && !hasPendingRequest && !hasSentRequest && matchesSearch;
  });

  const handleAddContact = async (user) => {
    try {
      console.log('Envoi demande d\'ami √†:', user.id);
      await contactService.sendFriendRequest(user.id);
      
      // Ajouter l'utilisateur √† la liste des demandes envoy√©es
      const newSentRequest = {
        id: user.id,
        name: user.name,
        fullName: user.fullName,
        email: user.email,
        bio: user.bio,
        location: user.location,
        interests: user.interests,
        profilePicture: user.profile_picture,
        status: 'sent',
        sentAt: new Date().toISOString()
      };
      
      setSentRequests(prevSent => [...prevSent, newSentRequest]);
      
      // Sauvegarder dans localStorage pour persistance
      const currentSent = JSON.parse(localStorage.getItem('sentRequests') || '[]');
      const updatedSent = [...currentSent, newSentRequest];
      localStorage.setItem('sentRequests', JSON.stringify(updatedSent));
      
      console.log('‚úÖ Demande ajout√©e √† la liste des demandes envoy√©es');
      
      // Recharger les donn√©es pour mettre √† jour l'affichage
      await loadContactData();
      
      alert(`Demande d'ami envoy√©e √† ${user.name} !`);
    } catch (error) {
      console.error('Erreur envoi demande d\'ami:', error);
      
      // Si l'erreur est "Relation d√©j√† existante", rediriger vers l'onglet Demandes
      if (error.message.includes('Relation d√©j√† existante')) {
        console.log('üîÑ Relation existante d√©tect√©e, redirection vers l\'onglet Demandes');
        
        // Recharger les donn√©es pour synchroniser l'√©tat
        const updatedContactsData = await contactService.getMyContacts();
        console.log('üîÑ Donn√©es recharg√©es:', updatedContactsData);
        
        // V√©rifier directement dans les donn√©es fra√Æches
        const isInAcceptedContacts = (updatedContactsData.accepted_contacts || []).some(contact => contact.id === user.id);
        const isInPendingRequests = (updatedContactsData.pending_requests || []).some(request => request.user.id === user.id);
        const isInSentRequests = (updatedContactsData.sent_requests || []).some(request => request.user.id === user.id);
        
        console.log('üîç V√©rification dans donn√©es fra√Æches:', {
          userId: user.id,
          userName: user.name,
          isInAcceptedContacts,
          isInPendingRequests,
          isInSentRequests
        });
        
        // Si la personne n'est trouv√©e nulle part, c'est probablement une demande envoy√©e non track√©e
        if (!isInAcceptedContacts && !isInPendingRequests && !isInSentRequests) {
          console.log('ü§î Personne non trouv√©e dans les donn√©es API - ajout aux demandes envoy√©es');
          
          // V√©rifier que l'utilisateur ne s'ajoute pas lui-m√™me
          const currentUserId = parseInt(localStorage.getItem('userId'));
          if (user.id === currentUserId) {
            console.log('‚ùå Tentative d\'auto-ajout d√©tect√©e - ignor√©e');
            return;
          }
          
          // Cr√©er une entr√©e de demande envoy√©e
          const newSentRequest = {
            id: user.id,
            name: user.name,
            fullName: user.fullName,
            email: user.email,
            bio: user.bio,
            location: user.location,
            interests: user.interests,
            profilePicture: user.profile_picture,
            status: 'sent',
            sentAt: new Date().toISOString()
          };
          
          // Ajouter aux demandes envoy√©es dans localStorage
          const currentSent = JSON.parse(localStorage.getItem('sentRequests') || '[]');
          const updatedSent = [...currentSent, newSentRequest];
          localStorage.setItem('sentRequests', JSON.stringify(updatedSent));
          console.log('‚úÖ Ajout√© aux demandes envoy√©es dans localStorage:', user.name);
        }
        
        // Recharger les donn√©es du composant maintenant
        await loadContactData();
        
        // Mettre en √©vidence l'utilisateur et rediriger vers l'onglet Demandes
        setHighlightedUserId(user.id);
        setActiveTab('demandes');
        
        // Fermer la recherche
        setIsSearchOpen(false);
        
        // Retirer la mise en √©vidence apr√®s 3 secondes
        setTimeout(() => {
          setHighlightedUserId(null);
        }, 3000);
        
        console.log('‚úÖ Redirection vers l\'onglet Demandes avec mise en √©vidence de l\'utilisateur ID:', user.id);
        
      } else {
        alert('Erreur lors de l\'envoi de la demande d\'ami');
      }
    }
  };

  const handleRespondToRequest = async (contactRelationId, action) => {
    try {
      console.log(`${action} demande d'ami ID:`, contactRelationId);
      
      // Sauvegarder l'utilisateur dans la liste persistante AVANT de r√©pondre √† la demande
      if (action === 'decline') {
        const userToSave = pendingRequests.find(req => req.contactRelationId === contactRelationId);
        if (userToSave) {
          console.log('üíæ Sauvegarde utilisateur refus√©:', userToSave.name);
          
          const currentPersistent = JSON.parse(localStorage.getItem('persistentUsers') || '[]');
          const persistentMap = new Map();
          
          // Ajouter les utilisateurs persistants existants
          currentPersistent.forEach(user => {
            persistentMap.set(user.id, user);
          });
          
          // Ajouter l'utilisateur refus√©
          persistentMap.set(userToSave.id, {
            id: userToSave.id,
            name: userToSave.name,
            fullName: userToSave.fullName,
            email: userToSave.email,
            bio: userToSave.bio,
            location: userToSave.location,
            interests: userToSave.interests,
            profile_picture: userToSave.profilePicture
          });
          
          const updatedPersistent = Array.from(persistentMap.values());
          localStorage.setItem('persistentUsers', JSON.stringify(updatedPersistent));
          setPersistentUsers(updatedPersistent);
          
          console.log('üíæ Utilisateur sauvegard√©, total persistants:', updatedPersistent.length);
        }
      }
      
      await contactService.respondToFriendRequest(contactRelationId, action);
      
      // Recharger les donn√©es
      await loadContactData();
      
      const actionText = action === 'accept' ? 'accept√©e' : 'refus√©e';
      alert(`Demande d'ami ${actionText} !`);
    } catch (error) {
      console.error('Erreur r√©ponse demande d\'ami:', error);
      alert('Erreur lors de la r√©ponse √† la demande d\'ami');
    }
  };

  const handleRemoveContact = async (contact) => {
    const confirmDelete = window.confirm(`√ätes-vous s√ªr de vouloir retirer ${contact.name} de vos amis ?`);
    
    if (!confirmDelete) return;
    
    try {
      console.log('Suppression du contact ID:', contact.contactRelationId);
      await contactService.removeContact(contact.contactRelationId);
      
      // Recharger les donn√©es pour mettre √† jour l'affichage
      await loadContactData();
      
      alert(`${contact.name} a √©t√© retir√© de vos amis.`);
    } catch (error) {
      console.error('Erreur suppression contact:', error);
      alert('Erreur lors de la suppression du contact');
    }
  };

  const handleMessageContact = (contact) => {
    // Stocker le contact s√©lectionn√© pour la messagerie
    localStorage.setItem('selectedContact', JSON.stringify({
      id: contact.id,
      name: contact.name,
      email: contact.email
    }));
    
    // Rediriger vers la page messagerie
    navigate('/messagerie');
  };

  const openSearch = () => {
    setIsSearchOpen(true);
    setSearchQuery('');
  };

  const closeSearch = () => {
    setIsSearchOpen(false);
    setSearchQuery('');
  };

  // Fonction pour nettoyer le localStorage
  const cleanLocalStorage = () => {
    console.log('üßπ Nettoyage du localStorage...');
    localStorage.removeItem('sentRequests');
    localStorage.removeItem('persistentUsers');
    console.log('‚úÖ localStorage nettoy√©');
  };

  if (loading) {
    return (
      <div className="contact-page">
        <div className="contact-container">
          <p style={{ textAlign: 'center', padding: '40px' }}>Chargement des contacts...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="contact-page">
        <div className="contact-container">
          <div style={{
            backgroundColor: '#ffebee',
            color: '#c62828',
            padding: '20px',
            borderRadius: '5px',
            margin: '20px 0',
            border: '1px solid #ffcdd2',
            textAlign: 'center'
          }}>
            ‚ùå {error}
          </div>
          <button 
            onClick={loadContactData} 
            style={{
              display: 'block',
              margin: '20px auto',
              padding: '10px 20px',
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer'
            }}
          >
            R√©essayer
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="contact-page">
      <div className="contact-container">
        <div className="contact-header">
          <h1 className="contact-main-title">
            Mes amis <span className="brand-name">Age2meet</span>
          </h1>
        </div>
        
        <div className="contact-tabs">
          <button 
            className={`tab-button ${activeTab === 'contact' ? 'active' : ''}`}
            onClick={() => setActiveTab('contact')}
          >
            Contact ({contacts.length})
          </button>
          <button 
            className={`tab-button ${activeTab === 'demandes' ? 'active' : ''}`}
            onClick={() => setActiveTab('demandes')}
          >
            Demandes ({pendingRequests.length + sentRequests.length})
          </button>
        </div>

        <div className="contact-content">
          {activeTab === 'contact' && (
            <div className="contact-tab-content">
              {contacts.length > 0 && (
                <div className="contacts-list-container">
                  <h3 className="contacts-subtitle">Mes contacts ({contacts.length})</h3>
                  <div className="contacts-grid">
                    {contacts.map(contact => (
                      <div key={contact.id} className="contact-card">
                        {renderAvatar(contact.profilePicture, contact.name, "contact-avatar-large")}
                        <div className="contact-details">
                          <div className="contact-card-name">{contact.name}</div>
                          <div className="contact-card-info">{contact.bio}</div>
                          <div className="contact-interests">
                            {contact.interests && contact.interests.map((interest, index) => (
                              <span key={index} className="interest-tag">{interest}</span>
                            ))}
                          </div>
                        </div>
                        <div className="contact-actions">
                          <button 
                            className="message-contact-btn"
                            onClick={() => handleMessageContact(contact)}
                            title="Envoyer un message"
                          >
                            ‚úâ
                          </button>
                          <button 
                            className="remove-contact-btn"
                            onClick={() => handleRemoveContact(contact)}
                            title="Retirer cet ami"
                          >
                            üóëÔ∏è
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {contacts.length === 0 && !isSearchOpen && (
                <p className="no-contacts-message">Aucun contact trouv√©. Commencez par ajouter des amis !</p>
              )}
              
              {!isSearchOpen && (
                <button className="add-contact-button" onClick={openSearch}>
                  Ajouter un contact <span className="arrow">‚Üí</span>
                </button>
              )}

              {isSearchOpen && (
                <div className="search-container">
                  <div className="search-header">
                    <h3 className="search-title">Rechercher des utilisateurs</h3>
                    <button className="close-search-btn" onClick={closeSearch}>√ó</button>
                  </div>
                  
                  <div className="search-input-container">
                    <input
                      type="text"
                      className="search-input"
                      placeholder="Rechercher par nom, ville ou centre d'int√©r√™t..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>

                  {filteredUsers.length > 0 ? (
                    <div className="users-grid">
                      {filteredUsers.map(user => {
                        const isAlreadyContact = contacts.find(contact => contact.id === user.id);
                        const isPendingRequest = pendingRequests.find(req => req.id === user.id);
                        
                        return (
                          <div key={user.id} className="user-card">
                            {renderAvatar(user.profile_picture, user.name, "user-avatar")}
                            <div className="user-details">
                              <div className="user-name">{user.name}</div>
                              <div className="user-info">{user.bio}</div>
                              <div className="user-interests">
                                {user.interests && user.interests.map((interest, index) => (
                                  <span key={index} className="interest-tag">{interest}</span>
                                ))}
                              </div>
                            </div>
                            <button 
                              className="add-user-btn"
                              onClick={() => handleAddContact(user)}
                              disabled={isAlreadyContact || isPendingRequest}
                            >
                              {isAlreadyContact ? 'D√©j√† ami' : 
                               isPendingRequest ? 'Demande envoy√©e' : 'Ajouter'}
                            </button>
                          </div>
                        );
                      })}
                    </div>
                  ) : searchQuery && (
                    <p className="no-results-message">Aucun utilisateur trouv√© pour "{searchQuery}"</p>
                  )}
                </div>
              )}
            </div>
          )}

          {activeTab === 'demandes' && (
            <div className="demandes-tab-content">
              {pendingRequests.length > 0 ? (
                <div className="requests-list">
                  <h3 className="requests-subtitle">Demandes re√ßues ({pendingRequests.length})</h3>
                  <div className="contacts-grid">
                    {pendingRequests.map(request => (
                      <div 
                        key={request.contactRelationId} 
                        className={`contact-card ${highlightedUserId === request.id ? 'highlighted-card' : ''}`}
                      >
                        {renderAvatar(request.profilePicture, request.name, "contact-avatar-large")}
                        <div className="contact-details">
                          <div className="contact-card-name">{request.name}</div>
                          <div className="contact-card-info">{request.bio}</div>
                          <div className="contact-interests">
                            {request.interests && request.interests.map((interest, index) => (
                              <span key={index} className="interest-tag">{interest}</span>
                            ))}
                          </div>
                        </div>
                        <div className="request-actions">
                          <button 
                            className="accept-btn"
                            onClick={() => handleRespondToRequest(request.contactRelationId, 'accept')}
                          >
                            Accepter
                          </button>
                          <button 
                            className="decline-btn"
                            onClick={() => handleRespondToRequest(request.contactRelationId, 'decline')}
                          >
                            Refuser
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <p className="no-requests-message">Aucune demande d'ami re√ßue</p>
              )}
              
              {/* NOUVELLE SECTION: Demandes envoy√©es */}
              {sentRequests.length > 0 && (
                <div className="sent-requests-list">
                  <h3 className="requests-subtitle">Demandes envoy√©es ({sentRequests.length})</h3>
                  <div className="contacts-grid">
                    {sentRequests.map(request => (
                      <div 
                        key={request.id} 
                        className={`contact-card sent-request-card ${highlightedUserId === request.id ? 'highlighted-card' : ''}`}
                      >
                        {renderAvatar(request.profilePicture, request.name, "contact-avatar-large")}
                        <div className="contact-details">
                          <div className="contact-card-name">{request.name}</div>
                          <div className="contact-card-info">{request.bio}</div>
                          <div className="contact-interests">
                            {request.interests && request.interests.map((interest, index) => (
                              <span key={index} className="interest-tag">{interest}</span>
                            ))}
                          </div>
                        </div>
                        <div className="request-status">
                          <span className="status-badge sent-badge">En attente</span>
                          <small className="sent-date">
                            Envoy√©e le {new Date(request.sentAt).toLocaleDateString('fr-FR')}
                          </small>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {pendingRequests.length === 0 && sentRequests.length === 0 && (
                <p className="no-requests-message">Aucune demande d'ami</p>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}