// Service centralis√© pour g√©rer les inscriptions aux activit√©s par utilisateur
class UserActivityService {
  constructor() {
    this.storageKey = 'userActivities';
  }

  // Obtenir l'ID de l'utilisateur connect√©
  getCurrentUserId() {
    return localStorage.getItem('userId');
  }

  // Obtenir le nom d'utilisateur connect√©
  getCurrentUsername() {
    return localStorage.getItem('username');
  }

  // V√©rifier si l'utilisateur est connect√©
  isUserLoggedIn() {
    return !!this.getCurrentUserId();
  }

  // Obtenir les donn√©es de tous les utilisateurs
  getAllUserData() {
    const data = localStorage.getItem(this.storageKey);
    return data ? JSON.parse(data) : {};
  }

  // Obtenir les inscriptions de l'utilisateur actuel
  getCurrentUserRegistrations() {
    if (!this.isUserLoggedIn()) {
      return [];
    }
    
    const userId = this.getCurrentUserId();
    const allData = this.getAllUserData();
    return allData[userId]?.registeredActivities || [];
  }

  // Obtenir les √©v√©nements agenda de l'utilisateur actuel
  getCurrentUserEvents() {
    if (!this.isUserLoggedIn()) {
      return [];
    }
    
    const userId = this.getCurrentUserId();
    const allData = this.getAllUserData();
    return allData[userId]?.agendaEvents || [];
  }

  // Sauvegarder les donn√©es d'un utilisateur
  saveUserData(userId, registeredActivities, agendaEvents) {
    const allData = this.getAllUserData();
    
    if (!allData[userId]) {
      allData[userId] = {};
    }
    
    allData[userId].registeredActivities = registeredActivities;
    allData[userId].agendaEvents = agendaEvents;
    
    localStorage.setItem(this.storageKey, JSON.stringify(allData));
    
    // D√©clencher un √©v√©nement pour notifier les autres composants
    window.dispatchEvent(new CustomEvent('userActivitiesUpdated', {
      detail: { userId, registeredActivities, agendaEvents }
    }));
  }

  // Inscrire l'utilisateur √† une activit√©
  registerToActivity(activity) {
    if (!this.isUserLoggedIn()) {
      throw new Error('Vous devez √™tre connect√© pour vous inscrire √† une activit√©');
    }

    const userId = this.getCurrentUserId();
    const currentRegistrations = this.getCurrentUserRegistrations();
    const currentEvents = this.getCurrentUserEvents();

    // V√©rifier si d√©j√† inscrit
    if (currentRegistrations.includes(activity.id)) {
      throw new Error('Vous √™tes d√©j√† inscrit √† cette activit√©');
    }

    // Ajouter l'inscription
    const newRegistrations = [...currentRegistrations, activity.id];

    // Cr√©er l'√©v√©nement pour l'agenda
    const newEvent = {
      id: Date.now() + Math.random(),
      title: activity.title,
      description: `${activity.description}\n\nLieu: ${activity.location}`,
      type: 'social',
      date: activity.fullDate,
      time: activity.startTime,
      isActivity: true,
      activityId: activity.id
    };

    const newEvents = [...currentEvents, newEvent];

    // Sauvegarder
    this.saveUserData(userId, newRegistrations, newEvents);

    console.log(`‚úÖ Utilisateur ${userId} inscrit √† l'activit√© ${activity.title}`);
    return newEvent;
  }

  // D√©sinscrire l'utilisateur d'une activit√©
  unregisterFromActivity(activityId, activityTitle = null) {
    if (!this.isUserLoggedIn()) {
      return false;
    }

    const userId = this.getCurrentUserId();
    const currentRegistrations = this.getCurrentUserRegistrations();
    const currentEvents = this.getCurrentUserEvents();

    // Retirer l'inscription
    const newRegistrations = currentRegistrations.filter(id => id !== activityId);

    // Retirer l'√©v√©nement de l'agenda (par activityId ou titre)
    const newEvents = currentEvents.filter(event => {
      if (event.activityId) {
        return event.activityId !== activityId;
      }
      if (activityTitle) {
        const eventTitle = event.title.replace('üéØ ', '');
        return eventTitle !== activityTitle;
      }
      return true;
    });

    // Sauvegarder
    this.saveUserData(userId, newRegistrations, newEvents);

    console.log(`‚ùå Utilisateur ${userId} d√©sinscrit de l'activit√© ${activityId}`);
    return true;
  }

  // V√©rifier si l'utilisateur est inscrit √† une activit√©
  isRegisteredToActivity(activityId) {
    if (!this.isUserLoggedIn()) {
      return false;
    }
    
    const registrations = this.getCurrentUserRegistrations();
    return registrations.includes(activityId);
  }

  // Nettoyer les donn√©es lors de la d√©connexion
  clearCurrentUserData() {
    // On ne supprime pas les donn√©es, on les garde pour la reconnexion
    console.log('Donn√©es utilisateur conserv√©es pour la reconnexion');
  }

  // Migrer les anciennes donn√©es (si n√©cessaire)
  migrateOldData() {
    const oldRegistrations = localStorage.getItem('registeredActivities');
    const oldEvents = localStorage.getItem('agendaEvents');
    
    if (oldRegistrations || oldEvents) {
      const userId = this.getCurrentUserId();
      if (userId) {
        const registrations = oldRegistrations ? JSON.parse(oldRegistrations) : [];
        const events = oldEvents ? JSON.parse(oldEvents) : [];
        
        this.saveUserData(userId, registrations, events);
        
        // Supprimer les anciennes donn√©es
        localStorage.removeItem('registeredActivities');
        localStorage.removeItem('agendaEvents');
        
        console.log('Migration des anciennes donn√©es termin√©e');
      }
    }
  }
}

// Instance unique du service
export const userActivityService = new UserActivityService();
export default userActivityService; 